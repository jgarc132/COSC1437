import java.util.*;
import java.io.*;
public class MatrixProcessor {
  public static void main(String[] args)throws IOException{
    int[][] array = populateArray();
    getRowTotal(array,3);
    getColTotal(array,1);
    System.out.println("Sum: " + getSum(array));
    System.out.printf("AVG: %.02f \n", getAVG(array));
    for(int i = 0; i < getDiagonalsProduct(array).length;i++){
      System.out.println(getDiagonalsProduct(array)[i]);
    }
    //getSmallestVector(array);
  }
  public static int[][] populateArray()throws IOException{
    Scanner scanner = new Scanner(new File("matrixA.txt"));
    String line = scanner.nextLine();
    String token[] = line.split(" ");
    int[][] ar = new int[Integer.parseInt(token[0])][Integer.parseInt(token[1])];
    for(int i = 0; i < ar.length;i++){
      for(int j = 0; j < ar[i].length;j++){
        ar[i][j] = scanner.nextInt();
        System.out.print(ar[i][j] + "\t");
      }
      System.out.println();
      if(scanner.hasNextLine()){
        scanner.nextLine();
      }
    }
    scanner.close();
    return ar;
  }
  //Get Row
  public static void getRowTotal(int[][] array, int r){
    int total = 0;
    for(int i = 0;i < array[0].length;i++){
      total += array[r][i];
    }
    System.out.println("The total sum of row " + r + " is " + total);
  }
  //Get Column
  public static void getColTotal(int[][] array, int c){
    int total = 0;
    for(int i = 0;i < array.length;i++){
      total += array[i][c];
    }
    System.out.println("The total sum of colums " + c + " is " + total);
  }
  //Sum
  public static int getSum(int[][] array){
    int sum = 0;
    for(int i = 0; i < array.length;i++){
      for(int j = 0;j < array[0].length;j++){
        sum += array[i][j];
      }
    }
    return sum;
  }
  public static double getAVG(int[][] array){
    int num = 0;
    for(int i = 0; i < array.length;i++){
      for(int j = 0;j < array[0].length;j++){
        num++;
      }
    }
    return (double)(getSum(array))/num;
  }
  public static int[] getDiagonalsProduct(int[][] array){
    int[] leftDiag = new int[array[0].length];
    int[] rightDiag = new int[array[0].length];
    int[] product = new int[array[0].length];
    for(int i = 0; i < array[0].length;i++){
      leftDiag[i] = array[i][i];
    }
    for(int i = array.length; i < array[0].length;i--){
      rightDiag[i] = array[i][i];
    }
    for(int i = 0;i < array[0].length;i++){
      product[i] = (leftDiag[i])*(rightDiag[i]);
    }
    return product;
  }
//  public static void getSmallestVector(int[][] array){
//    int[][] rowTimesCol = new int[array.length][array[0].length];
//    int k = 0;
//     for(int i = 0;i < findTheSmallestPerCol(array).length;i++){
//      rowTimesCol[i][k] = (findTheSmallestPerCol(array)[i])*(findTheSmallestPerCol(array)[i]);
//      k++;
//      System.out.println(rowTimesCol[i][k]);
//    }
//  }
//  
  public static int[] findTheSmallestPerRow(int[][] array){
    int smallest; 
    int[] smallestRows = new int[array.length];
    for(int i = 0; i < array.length;i++){
      smallest = array[0][0];
      for(int j = 0; j < array[i].length;j++){
        if(smallest > array[i][j]){
          smallest = array[i][j];
        }
      }
      smallestRows[i] = smallest;
    }
    return smallestRows;
  }
  public static int[] findTheSmallestPerCol(int[][] array){
    int smallest; 
    int[] smallestCol = new int[array[0].length];
    for(int i = 0; i < array[0].length;i++){
      smallest = array[0][i];
      for(int j = 0; j < array.length;j++){
        if(smallest > array[j][i]){
          smallest = array[j][i];
        }
      }
      smallestCol[i] = smallest;
    }
    return smallestCol;
  }
  
}